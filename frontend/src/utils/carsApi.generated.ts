/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/account/requests": {
    /**
     * Get API Usage
     * @description Returns the total requests made by your account since last month to rate-limited endpoints. All dates are
     * reported using UTC/GMT -5 (US Eastern Standard Time).
     */
    get: operations["account:requests:get"];
  };
  "/api/account/requests-today": {
    /**
     * Get Today's API Usage
     * @description Returns the total requests made by your account today to rate-limited endpoints. All dates are
     * reported using UTC/GMT -5 (US Eastern Standard Time).
     */
    get: operations["account:requeststoday:get"];
  };
  "/api/auth/login": {
    /**
     * JWT Login
     * @description CarAPI uses JSON Web Tokens (JWT) to authenticate requests. You can generate a JWT using your API Token and
     * API Secret in SwaggerUI (this page) with the following steps:
     *
     * - Click the "Try Out" button
     * - Enter API Token and API Secret in the JSON payload.
     * - Click Execute
     * - A JWT will be returned if the credentials are correct
     * - Next click the "Authorize" button at the top-right of Swagger UI (this page) and paste in the JWT.
     *
     * Your JWT will now be sent with any request you make in Swagger until you refresh the page.
     *
     * In your application code, Postman or cURL, you will need to pass the token in the HTTP Header as:
     *
     * ```
     * Authorization: Bearer {TOKEN_VALUE_HERE}
     * ```
     *
     * You should cache your JWT to avoid having to authenticate on each request. You must check the token's
     * expiration value to determine when you need to generate a new token. Please refer to
     * [https://jwt.io/](https://jwt.io/) to learn more about JSON Web Tokens.
     *
     * Your email address and password cannot be used to generate a JWT. You must use your API token and secret.
     *
     * If you don't yet have API credentials you must first [register](/register) and then generate a secret.
     * Unauthenticated users have limited data access.
     *
     * For additional documentation please review [https://carapi.app/docs](https://carapi.app/docs).
     */
    post: operations["auth:api:post"];
  };
  "/api/bodies": {
    /**
     * Search vehicle bodies
     * @description To include additional information about the returned body (such as year, make, model and trim) request with the
     * query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "doors", "op": ">=", "val": 4}, {"field": "type", "op": "in", "val": ["SUV","Van"]}]`
     *
     * See `/api/vehicle-attributes` for a complete list of vehicle attributes.
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `trim`, `type`, `doors`, `seats`, `length`, `width`, `height`, `wheel_base`, `front_track`, `rear_track`, `ground_clearance`, `cargo_capacity`, `max_cargo_capacity`, `curb_weight`, `gross_weight`, `max_payload`, `max_towing_capacity`, `make_model_trim_id`, `created`, `modified`, `make_id`, and `make_model_id`.
     */
    get: operations["makemodeltrimbodies:index:get"];
  };
  "/api/engines": {
    /**
     * Search vehicle engines
     * @description To include additional information about the returned body (such as year, make, model and trim) request with the
     * query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "horsepower_hp", "op": ">=", "val": 100}, {"field": "horsepower_hp", "op": "<=", "val": 300}]`
     *
     * See `/api/vehicle-attributes` for a complete list of vehicle attributes.
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `trim`, `fuel_type`, `engine_type`, `transmission`, `drive_type`, `cam_type`, `valve_timing`, `valves`, `horsepower_hp`, `size`, `cylinders`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
     */
    get: operations["makemodeltrimengines:index:get"];
  };
  "/api/exterior-colors": {
    /**
     * Search vehicle exterior colors
     * @description To include additional information about the returned body (such as year, make, model and trim) request with the
     * query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "name", "op": "in", "val": ["red", "blue"]}]`
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `trim`, `name`, `rgb`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
     */
    get: operations["makemodeltrimexteriorcolors:index:get"];
  };
  "/api/interior-colors": {
    /**
     * Search vehicle interior colors
     * @description To include additional information about the returned body (such as year, make, model and trim) request with the
     * query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "name", "op": "in", "val": ["red", "blue"]}]`
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `trim`, `name`, `rgb`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
     */
    get: operations["makemodeltriminteriorcolors:index:get"];
  };
  "/api/makes": {
    /**
     * Get Makes
     * @description Search makes by name and year.
     */
    get: operations["makes:index:get"];
  };
  "/api/mileages": {
    /**
     * Search vehicle mileages
     * @description To include additional information about the returned body (such as year, make, model and trim) request with the
     * query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "combined_mpg", "op": ">=", "val": 20}, {"field": "combined_mpg", "op": "<=", "val": 30}]`
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `trim`, `fuel_tank_capacity`, `combined_mpg`, `epa_city_mpg`, `epa_highway_mpg`, `range_city`, `range_highway`, `epa_combined_mpg_electric`, `epa_city_mpg_electric`, `epa_highway_mpg_electric`, `range_electric`, `epa_kwh_100_mi_electric`, `epa_time_to_charge_hr_240v_electric`, `battery_capacity_electric`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
     */
    get: operations["makemodeltrimmileages:index:get"];
  };
  "/api/models": {
    /**
     * Get Models
     * @description Search models by year, make, model, trim or make_id.
     *
     * To include the models make in the description request with the query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "make", "op": "in", "val": ["Ford", "Acura"]}, {"field": "year", "op": ">=", "val": 2010}]`
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `make_id`, `created`, and `modified`.
     */
    get: operations["makemodels:index:get"];
  };
  "/api/trims": {
    /**
     * Search trims
     * @description To include additional information about the returned body (such as year, make, model and trim) request with the
     * query parameter as `verbose=yes`.
     *
     * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "year", "op": ">=", "val": 2010}, {"field": "year", "op": "<=", "val": 2020}]`
     *
     * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
     *
     * Allowed json search fields are:
     *  `year`, `make`, `model`, `trim`, `make_model_id`, `make_model_trim_id`, `created`, `modified`, `bodies.type`, `engines.cam_type`, `engines.cylinders`, `engines.drive_type`, `engines.engine_type`, `engines.fuel_type`, `engines.transmission`, `engines.valve_timing`, `engines.valves`, and `make_id`.
     */
    get: operations["makemodeltrims:index:get"];
  };
  "/api/trims/{id}": {
    /**
     * Get vehicle data.
     * @description Returns all data associated with the vehicle trim.
     */
    get: operations["makemodeltrims:view:get"];
  };
  "/api/vehicle-attributes": {
    /**
     * Get Vehicle Attributes
     * @description Returns all options for given attribute.
     */
    get: operations["vehicleattributes:display:get"];
  };
  "/api/vin/{vin}": {
    /**
     * Vin Decoder
     * @description Decodes Vehicle Identification Numbers. The result will include a list of specifications in the `specs` property
     * and a list of all possible trims matching the VIN in the `trims` property. For non-paying users, all VINs for
     * 2015-2020 models (e.g. 1GTG6CEN0L1139305) will be returned, otherwise data is hidden. Paying users have full
     * data access.
     *
     * You may include body, engine, and mileage data to the matching trims by requesting `?verbose=yes`.
     *
     * You may include all trims for the VINs model by requesting `?all_trims=yes`. By default, only trims
     * closely matching the requested VIN are returned.
     */
    get: operations["vindecoder:index:get"];
  };
  "/api/years": {
    /**
     * Get Years List
     * @description For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
     *
     * `[{"field": "make", "op": "in", "val": ["Scion", "Tesla"]}]`
     *
     * Allowed operators are: `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `is null` and `not null`.
     *
     * Allowed search fields are: `year`, `make`, `model`, `trim`, `make_id`, and `make_model_id`.
     */
    get: operations["years:index:get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Exception: {
      /** @example ExceptionName */
      exception?: string;
      /** @example 500 */
      code?: number;
      /** @example /url/path */
      url?: string;
      /** @example Internal Error */
      message?: string;
    };
    Make: {
      /** Format: int64 */
      id?: number;
      /** @description Vehicle make/brand */
      name?: string;
      is_active?: boolean;
    };
    MakeModel: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_id?: number;
      /** @description Vehicle model */
      name?: string;
      /** Format: int64 */
      import_id?: number;
      source?: string;
      is_active?: boolean;
    };
    MakeModelTrim: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_model_id?: number;
      /**
       * Format: int32
       * @description Vehicle Year
       */
      year?: number;
      /** @description Vehicle Trim */
      name?: string;
      /** @description Full trim description */
      description?: string;
      /**
       * Format: int64
       * @description Manufacturers Suggested Retail Price
       */
      msrp?: number;
      /**
       * Format: int64
       * @description The typical auto dealers cost
       */
      invoice?: number;
      /** Format: int64 */
      import_id?: number;
      source?: string;
      is_active?: boolean;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      modified?: string;
    };
    MakeModelTrimBody: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_model_trim_id?: number;
      /**
       * @description The body type, such as SUV or Sedan
       * @enum {string}
       */
      type?: "Cargo Van" | "Convertible" | "Coupe" | "Ext Van" | "Hatchback" | "Minivan" | "Passenger Van" | "Sedan" | "SUV" | "Truck (Access Cab)" | "Truck (Cab Plus)" | "Truck (Club Cab)" | "Truck (Crew Cab)" | "Truck (CrewMax)" | "Truck (Double Cab)" | "Truck (Extended Cab)" | "Truck (King Cab)" | "Truck (Mega Cab)" | "Truck (Quad Cab)" | "Truck (Regular Cab)" | "Truck (SuperCab)" | "Truck (SuperCrew)" | "Truck (Xtracab)" | "Van" | "Wagon";
      /**
       * Format: int32
       * @description Number of doors &mdash; generally including a hatchback as an additional door
       */
      doors?: number;
      /**
       * Format: float
       * @description Total length (in inches) of the vehicle in inches
       */
      length?: number;
      /**
       * Format: float
       * @description Total width (in inches) of the vehicle
       */
      width?: number;
      /**
       * Format: int32
       * @description Number of passenger seats in the vehicle.
       */
      seats?: number;
      /**
       * Format: float
       * @description Total height (in inches) of the vehicle
       */
      height?: number;
      /**
       * Format: float
       * @description The horizontal distance (in inches) between the centers of the front and rear wheels
       */
      wheel_base?: number;
      /**
       * Format: float
       * @description The distance (in inches) between the centerline of the wheels
       */
      front_track?: number;
      /**
       * Format: float
       * @description The distance (in inches) between the hub flanges on an axle
       */
      rear_track?: number;
      /**
       * Format: float
       * @description The distance (in inches) between the lowest point on the undersurface of the vehicle and the road
       */
      ground_clearance?: number;
      /**
       * Format: float
       * @description The standard total cubic feet of space in a vehicles cargo area
       */
      cargo_capacity?: number;
      /**
       * Format: float
       * @description The maximum total cubic feet of space in a vehicles cargo area
       */
      max_cargo_capacity?: number;
      /**
       * Format: int64
       * @description Curb weight refers to the vehicles heaviness (in pounds) without passengers or cargo, only counting the car itself along with necessary fluids like oil and coolant
       */
      curb_weight?: number;
      /**
       * Format: int64
       * @description Gross weight (in pounds) considers all components—including passengers, cargo, and both the tow vehicle weight—if one is attached
       */
      gross_weight?: number;
      /**
       * Format: int64
       * @description Maximum weight in pounds that a vehicle can safely carry
       */
      max_payload?: number;
      /**
       * Format: int64
       * @description Maximum weight in pounds that a vehicle can safely tow
       */
      max_towing_capacity?: number;
    };
    /** @description Engine specifications and transmission type */
    MakeModelTrimEngine: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_model_trim_id?: number;
      /**
       * @description Type of engine
       * @enum {string}
       */
      engine_type?: "diesel" | "electric" | "electric (fuel cell)" | "flex-fuel (FFV)" | "gas" | "hybrid" | "mild hybrid" | "natural gas (CNG)" | "plug-in hybrid";
      /**
       * @description The fuel the vehicle uses
       * @enum {string}
       */
      fuel_type?: "diesel fuel" | "electric" | "flex-fuel (premium unleaded recommended/E85)" | "flex-fuel (premium unleaded required/E85)" | "flex-fuel (unleaded/E85)" | "flex-fuel (unleaded/natural gas)" | "hydrogen" | "natural gas" | "premium unleaded (recommended)" | "premium unleaded (required)" | "regular unleaded";
      /**
       * @description How many cylinders the engine has
       * @enum {string}
       */
      cylinders?: "flat 4" | "flat 6" | "I2" | "I3" | "I4" | "I5" | "I6" | "rotary 0" | "V10" | "V12" | "V6" | "V8" | "W12" | "W16" | "W8";
      /**
       * Format: float
       * @description Total size of the engine in liters
       */
      size?: number;
      /**
       * Format: int64
       * @description One horsepower equals 33,000 foot-pounds of work per minute
       */
      horsepower_hp?: number;
      /** Format: int64 */
      horsepower_rpm?: number;
      /** Format: int64 */
      torque_ft_lbs?: number;
      /** Format: int64 */
      torque_rpm?: number;
      /**
       * Format: int32
       * @description Number of valves
       */
      valves?: number;
      /** @enum {string} */
      valve_timing?: "Variable";
      /** @enum {string} */
      cam_type?: "Double overhead cam (DOHC)" | "Overhead valves (OHV)" | "Single overhead cam (SOHC)";
      /** @enum {string} */
      drive_type?: "all wheel drive" | "four wheel drive" | "front wheel drive" | "rear wheel drive";
      /**
       * @description Type of transmission
       * @enum {string}
       */
      transmission?: "1-speed direct drive" | "10-speed automatic" | "10-speed shiftable automatic" | "2-speed" | "2-speed automatic" | "3-speed automatic" | "4-speed automatic" | "4-speed manual" | "4-speed shiftable automatic" | "5-speed automated manual" | "5-speed automatic" | "5-speed manual" | "5-speed shiftable automatic" | "6-speed automated manual" | "6-speed automatic" | "6-speed manual" | "6-speed shiftable automatic" | "7-speed automated manual" | "7-speed automatic" | "7-speed manual" | "7-speed shiftable automatic" | "8-speed automated manual" | "8-speed automatic" | "8-speed shiftable automatic" | "9-speed automated manual" | "9-speed automatic" | "9-speed shiftable automatic" | "continuously variable-speed automatic" | "continuously variable-speed shiftable automatic" | "electrically variable-speed automatic";
    };
    MakeModelTrimExteriorColor: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_model_trim_id?: number;
      /** @description Color and shade */
      name?: string;
      /** @description Red, Green, Blue (RGB) value */
      rgb?: string;
    };
    MakeModelTrimInteriorColor: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_model_trim_id?: number;
      /** @description Color and shade */
      name?: string;
      /** @description Red, Green, Blue (RGB) value */
      rgb?: string;
    };
    /** @description EPA miles per gallon, ranges etc. */
    MakeModelTrimMileage: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      make_model_trim_id?: number;
      /**
       * Format: float
       * @description How much fuel the vehicle holds (gallons)
       */
      fuel_tank_capacity?: number;
      /**
       * Format: int32
       * @description Combined fuel economy is a weighted average of City and Highway MPG values that is calculated by weighting the City value by 55% and the Highway value by 45%.
       */
      combined_mpg?: number;
      /**
       * Format: int32
       * @description Miles per gallon for city driving
       */
      epa_city_mpg?: number;
      /**
       * Format: int32
       * @description Miles per gallon for highway driving
       */
      epa_highway_mpg?: number;
      /**
       * Format: int32
       * @description Total range in miles on a full tank for city driving
       */
      range_city?: number;
      /**
       * Format: int32
       * @description Total range in miles on a full tank for highway driving
       */
      range_highway?: number;
      /**
       * Format: int32
       * @description Total capacity of the battery kWh
       */
      battery_capacity_electric?: number;
      /**
       * Format: float
       * @description How long it takes to charge an EV battery
       */
      epa_time_to_charge_hr_240v_electric?: number;
      /**
       * Format: int32
       * @description kWh used to drive 100 miles for an electric vehicle
       */
      epa_kwh_100_mi_electric?: number;
      /**
       * Format: int32
       * @description Range for electric vehicles in miles
       */
      range_electric?: number;
      /**
       * Format: int32
       * @description MPG equivalent for driving electric vehicles on the highway
       */
      epa_highway_mpg_electric?: number;
      /**
       * Format: int32
       * @description MPG equivalent for driving electric vehicles in the city
       */
      epa_city_mpg_electric?: number;
      /**
       * Format: int32
       * @description MPG equivalent for electric vehicles
       */
      epa_combined_mpg_electric?: number;
    };
    /**
     * @example [
     *   "option a",
     *   "option b ",
     *   "option c"
     * ]
     */
    VehicleAttribute: string[];
    /**
     * @example [
     *   2022,
     *   2021,
     *   2020
     * ]
     */
    Year: number[];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get API Usage
   * @description Returns the total requests made by your account since last month to rate-limited endpoints. All dates are
   * reported using UTC/GMT -5 (US Eastern Standard Time).
   */
  "account:requests:get": {
    responses: {
      200: {
        content: {
          "application/json": {
              /**
               * Format: date
               * @example 2023-01-01
               */
              date?: string;
              /** @example 203 */
              count?: number;
            }[];
          "application/ld+json": {
              /**
               * Format: date
               * @example 2023-01-01
               */
              date?: string;
              /** @example 203 */
              count?: number;
            }[];
          "application/hal+json": {
              /**
               * Format: date
               * @example 2023-01-01
               */
              date?: string;
              /** @example 203 */
              count?: number;
            }[];
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description UnauthenticatedException */
      500: {
        content: {
          "application/json": components["schemas"]["Exception"];
          "application/ld+json": components["schemas"]["Exception"];
          "application/hal+json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Get Today's API Usage
   * @description Returns the total requests made by your account today to rate-limited endpoints. All dates are
   * reported using UTC/GMT -5 (US Eastern Standard Time).
   */
  "account:requeststoday:get": {
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 42 */
            count?: number;
          };
          "application/ld+json": {
            /** @example 42 */
            count?: number;
          };
          "application/hal+json": {
            /** @example 42 */
            count?: number;
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description UnauthenticatedException */
      500: {
        content: {
          "application/json": components["schemas"]["Exception"];
          "application/ld+json": components["schemas"]["Exception"];
          "application/hal+json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * JWT Login
   * @description CarAPI uses JSON Web Tokens (JWT) to authenticate requests. You can generate a JWT using your API Token and
   * API Secret in SwaggerUI (this page) with the following steps:
   *
   * - Click the "Try Out" button
   * - Enter API Token and API Secret in the JSON payload.
   * - Click Execute
   * - A JWT will be returned if the credentials are correct
   * - Next click the "Authorize" button at the top-right of Swagger UI (this page) and paste in the JWT.
   *
   * Your JWT will now be sent with any request you make in Swagger until you refresh the page.
   *
   * In your application code, Postman or cURL, you will need to pass the token in the HTTP Header as:
   *
   * ```
   * Authorization: Bearer {TOKEN_VALUE_HERE}
   * ```
   *
   * You should cache your JWT to avoid having to authenticate on each request. You must check the token's
   * expiration value to determine when you need to generate a new token. Please refer to
   * [https://jwt.io/](https://jwt.io/) to learn more about JSON Web Tokens.
   *
   * Your email address and password cannot be used to generate a JWT. You must use your API token and secret.
   *
   * If you don't yet have API credentials you must first [register](/register) and then generate a secret.
   * Unauthenticated users have limited data access.
   *
   * For additional documentation please review [https://carapi.app/docs](https://carapi.app/docs).
   */
  "auth:api:post": {
    requestBody?: {
      content: {
        "application/json": {
          /** @example */
          api_token: string;
          /** @example */
          api_secret: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": external["swagger.json"];
          "application/ld+json": external["swagger.json"];
          "application/hal+json": external["swagger.json"];
        };
      };
      /** @description Authentication Failed */
      401: {
        content: {
          "application/json": external["swagger.json"];
          "application/ld+json": external["swagger.json"];
          "application/hal+json": external["swagger.json"];
        };
      };
      /** @description InvalidMethodException */
      405: {
        content: {
          "application/json": external["swagger.json"];
          "application/ld+json": external["swagger.json"];
          "application/hal+json": external["swagger.json"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": external["swagger.json"];
          "application/ld+json": external["swagger.json"];
          "application/hal+json": external["swagger.json"];
        };
      };
    };
  };
  /**
   * Search vehicle bodies
   * @description To include additional information about the returned body (such as year, make, model and trim) request with the
   * query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "doors", "op": ">=", "val": 4}, {"field": "type", "op": "in", "val": ["SUV","Van"]}]`
   *
   * See `/api/vehicle-attributes` for a complete list of vehicle attributes.
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `trim`, `type`, `doors`, `seats`, `length`, `width`, `height`, `wheel_base`, `front_track`, `rear_track`, `ground_clearance`, `cargo_capacity`, `max_cargo_capacity`, `curb_weight`, `gross_weight`, `max_payload`, `max_towing_capacity`, `make_model_trim_id`, `created`, `modified`, `make_id`, and `make_model_id`.
   */
  "makemodeltrimbodies:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_model_trim_id" | "type" | "doors" | "length" | "width" | "seats" | "height" | "wheel_base" | "front_track" | "rear_track" | "ground_clearance" | "cargo_capacity" | "max_cargo_capacity" | "curb_weight" | "gross_weight" | "max_payload" | "max_towing_capacity";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make, model and trim */
        verbose?: "yes" | "no";
        make_model_id?: string;
        make_id?: string;
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        make_model_trim_id?: string;
        type?: string;
        doors?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModelTrimBody"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModelTrimBody"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModelTrimBody"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Search vehicle engines
   * @description To include additional information about the returned body (such as year, make, model and trim) request with the
   * query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "horsepower_hp", "op": ">=", "val": 100}, {"field": "horsepower_hp", "op": "<=", "val": 300}]`
   *
   * See `/api/vehicle-attributes` for a complete list of vehicle attributes.
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `trim`, `fuel_type`, `engine_type`, `transmission`, `drive_type`, `cam_type`, `valve_timing`, `valves`, `horsepower_hp`, `size`, `cylinders`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
   */
  "makemodeltrimengines:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_model_trim_id" | "engine_type" | "fuel_type" | "cylinders" | "size" | "horsepower_hp" | "horsepower_rpm" | "torque_ft_lbs" | "torque_rpm" | "valves" | "valve_timing" | "cam_type" | "drive_type" | "transmission";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make, model and trim */
        verbose?: "yes" | "no";
        make_model_trim_id?: string;
        cylinders?: string;
        size?: string;
        horsepower_hp?: string;
        valves?: string;
        valve_timing?: string;
        cam_type?: string;
        drive_type?: string;
        transmission?: string;
        engine_type?: string;
        fuel_type?: string;
        make_model_id?: string;
        make_id?: string;
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModelTrimEngine"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModelTrimEngine"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModelTrimEngine"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Search vehicle exterior colors
   * @description To include additional information about the returned body (such as year, make, model and trim) request with the
   * query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "name", "op": "in", "val": ["red", "blue"]}]`
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `trim`, `name`, `rgb`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
   */
  "makemodeltrimexteriorcolors:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_model_trim_id" | "name" | "rgb";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make, model and trim */
        verbose?: "yes" | "no";
        make_model_trim_id?: string;
        make_model_id?: string;
        make_id?: string;
        name?: string;
        rgb?: string;
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModelTrimExteriorColor"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModelTrimExteriorColor"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModelTrimExteriorColor"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Search vehicle interior colors
   * @description To include additional information about the returned body (such as year, make, model and trim) request with the
   * query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "name", "op": "in", "val": ["red", "blue"]}]`
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `trim`, `name`, `rgb`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
   */
  "makemodeltriminteriorcolors:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_model_trim_id" | "name" | "rgb";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make, model and trim */
        verbose?: "yes" | "no";
        make_model_trim_id?: string;
        make_model_id?: string;
        make_id?: string;
        name?: string;
        rgb?: string;
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModelTrimInteriorColor"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModelTrimInteriorColor"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModelTrimInteriorColor"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Get Makes
   * @description Search makes by name and year.
   */
  "makes:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "name" | "is_active";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        make?: string;
        year?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Make"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["Make"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["Make"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Search vehicle mileages
   * @description To include additional information about the returned body (such as year, make, model and trim) request with the
   * query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "combined_mpg", "op": ">=", "val": 20}, {"field": "combined_mpg", "op": "<=", "val": 30}]`
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `trim`, `fuel_tank_capacity`, `combined_mpg`, `epa_city_mpg`, `epa_highway_mpg`, `range_city`, `range_highway`, `epa_combined_mpg_electric`, `epa_city_mpg_electric`, `epa_highway_mpg_electric`, `range_electric`, `epa_kwh_100_mi_electric`, `epa_time_to_charge_hr_240v_electric`, `battery_capacity_electric`, `created`, `modified`, `make_id`, `make_model_id`, and `make_model_trim_id`.
   */
  "makemodeltrimmileages:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_model_trim_id" | "fuel_tank_capacity" | "combined_mpg" | "epa_city_mpg" | "epa_highway_mpg" | "range_city" | "range_highway" | "battery_capacity_electric" | "epa_time_to_charge_hr_240v_electric" | "epa_kwh_100_mi_electric" | "range_electric" | "epa_highway_mpg_electric" | "epa_city_mpg_electric" | "epa_combined_mpg_electric";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make, model and trim */
        verbose?: "yes" | "no";
        make_model_trim_id?: string;
        combined_mpg?: string;
        epa_city_mpg?: string;
        epa_highway_mpg?: string;
        range_city?: string;
        range_highway?: string;
        make_model_id?: string;
        make_id?: string;
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModelTrimMileage"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModelTrimMileage"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModelTrimMileage"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Get Models
   * @description Search models by year, make, model, trim or make_id.
   *
   * To include the models make in the description request with the query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "make", "op": "in", "val": ["Ford", "Acura"]}, {"field": "year", "op": ">=", "val": 2010}]`
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `make_id`, `created`, and `modified`.
   */
  "makemodels:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_id" | "name" | "import_id" | "source" | "is_active";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make and model */
        verbose?: "yes" | "no";
        year?: string;
        make?: string;
        model?: string;
        make_id?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModel"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModel"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModel"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Search trims
   * @description To include additional information about the returned body (such as year, make, model and trim) request with the
   * query parameter as `verbose=yes`.
   *
   * For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "year", "op": ">=", "val": 2010}, {"field": "year", "op": "<=", "val": 2020}]`
   *
   * Allowed json operators are: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `not null`, and `is null`.
   *
   * Allowed json search fields are:
   *  `year`, `make`, `model`, `trim`, `make_model_id`, `make_model_trim_id`, `created`, `modified`, `bodies.type`, `engines.cam_type`, `engines.cylinders`, `engines.drive_type`, `engines.engine_type`, `engines.fuel_type`, `engines.transmission`, `engines.valve_timing`, `engines.valves`, and `make_id`.
   */
  "makemodeltrims:index:get": {
    parameters: {
      query?: {
        page?: x-swagger-bake["components"]["parameters"]["paginatorPage"];
        limit?: x-swagger-bake["components"]["parameters"]["paginatorLimit"];
        sort?: "id" | "make_model_id" | "year" | "name" | "description" | "msrp" | "invoice" | "import_id" | "source" | "is_active" | "created" | "modified";
        direction?: x-swagger-bake["components"]["parameters"]["paginatorDirection"];
        /** @description Includes make, model and trim */
        verbose?: "yes" | "no";
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        make_model_id?: string;
        make_id?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["MakeModelTrim"][];
          };
          "application/ld+json": {
            member?: components["schemas"]["MakeModelTrim"][];
          };
          "application/hal+json": {
            _embedded?: components["schemas"]["MakeModelTrim"][];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Get vehicle data.
   * @description Returns all data associated with the vehicle trim.
   */
  "makemodeltrims:view:get": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": ({
            make_model?: {
              make?: components["schemas"]["Make"];
            } & components["schemas"]["MakeModel"];
            make_model_trim_body?: components["schemas"]["MakeModelTrimBody"];
            /** @description Engine specifications and transmission type */
            make_model_trim_engine?: components["schemas"]["MakeModelTrimEngine"];
            /** @description EPA miles per gallon, ranges etc. */
            make_model_trim_mileage?: components["schemas"]["MakeModelTrimMileage"];
            make_model_trim_exterior_colors?: components["schemas"]["MakeModelTrimExteriorColor"][];
            make_model_trim_interior_colors?: components["schemas"]["MakeModelTrimInteriorColor"][];
          }) & components["schemas"]["MakeModelTrim"];
          "application/ld+json": unknown;
          "application/hal+json": unknown;
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description RecordNotFoundException */
      404: {
        content: {
          "application/json": components["schemas"]["Exception"];
          "application/ld+json": components["schemas"]["Exception"];
          "application/hal+json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Get Vehicle Attributes
   * @description Returns all options for given attribute.
   */
  "vehicleattributes:display:get": {
    parameters: {
      query?: {
        /** @description The attribute options to be returned */
        attribute?: "bodies.type" | "engines.cam_type" | "engines.cylinders" | "engines.drive_type" | "engines.engine_type" | "engines.fuel_type" | "engines.transmission" | "engines.valve_timing" | "engines.valves";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VehicleAttribute"];
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Vin Decoder
   * @description Decodes Vehicle Identification Numbers. The result will include a list of specifications in the `specs` property
   * and a list of all possible trims matching the VIN in the `trims` property. For non-paying users, all VINs for
   * 2015-2020 models (e.g. 1GTG6CEN0L1139305) will be returned, otherwise data is hidden. Paying users have full
   * data access.
   *
   * You may include body, engine, and mileage data to the matching trims by requesting `?verbose=yes`.
   *
   * You may include all trims for the VINs model by requesting `?all_trims=yes`. By default, only trims
   * closely matching the requested VIN are returned.
   */
  "vindecoder:index:get": {
    parameters: {
      query?: {
        /** @description Includes body, engine, and mileage data (default: no) */
        verbose?: "yes" | "no";
        /** @description Includes all trims for the matching model (default: no) */
        all_trims?: "yes" | "no";
      };
      path: {
        vin: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * Format: year
             * @example 2020
             */
            year?: number;
            /** @example make (e.g. Toyota) */
            make?: string;
            /** @example model (e.g. Camry) */
            model?: string;
            /** @example trim (e.g. LX) */
            trim?: string;
            specs?: Record<string, never>;
            trims?: Record<string, never>[];
          };
          "application/ld+json": {
            /**
             * Format: year
             * @example 2020
             */
            year?: number;
            /** @example make (e.g. Toyota) */
            make?: string;
            /** @example model (e.g. Camry) */
            model?: string;
            /** @example trim (e.g. LX) */
            trim?: string;
            specs?: Record<string, never>;
            trims?: Record<string, never>[];
          };
          "application/hal+json": {
            /**
             * Format: year
             * @example 2020
             */
            year?: number;
            /** @example make (e.g. Toyota) */
            make?: string;
            /** @example model (e.g. Camry) */
            model?: string;
            /** @example trim (e.g. LX) */
            trim?: string;
            specs?: Record<string, never>;
            trims?: Record<string, never>[];
          };
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
  /**
   * Get Years List
   * @description For complex queries you may use the json field to send an array of URL encoded JSON conditions, example:
   *
   * `[{"field": "make", "op": "in", "val": ["Scion", "Tesla"]}]`
   *
   * Allowed operators are: `>`, `<`, `>=`, `<=`, `in`, `not in`, `like`, `not like`, `is null` and `not null`.
   *
   * Allowed search fields are: `year`, `make`, `model`, `trim`, `make_id`, and `make_model_id`.
   */
  "years:index:get": {
    parameters: {
      query?: {
        year?: string;
        make?: string;
        model?: string;
        trim?: string;
        make_model_id?: string;
        make_id?: string;
        json?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Year"];
        };
      };
      /** @description BadRequestException */
      400: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description MethodNotAllowedException */
      405: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
      /** @description ServiceUnavailableException */
      503: {
        content: {
          "application/json": components["schemas"]["Exception"];
        };
      };
    };
  };
}
